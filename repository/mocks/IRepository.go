// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	model "beerstore/model"

	mock "github.com/stretchr/testify/mock"
)

// IRepository is an autogenerated mock type for the IRepository type
type IRepository struct {
	mock.Mock
}

type IRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IRepository) EXPECT() *IRepository_Expecter {
	return &IRepository_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: fields, values
func (_m *IRepository) Add(fields []string, values []interface{}) (int, error) {
	ret := _m.Called(fields, values)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]string, []interface{}) (int, error)); ok {
		return rf(fields, values)
	}
	if rf, ok := ret.Get(0).(func([]string, []interface{}) int); ok {
		r0 = rf(fields, values)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]string, []interface{}) error); ok {
		r1 = rf(fields, values)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IRepository_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type IRepository_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - fields []string
//   - values []interface{}
func (_e *IRepository_Expecter) Add(fields interface{}, values interface{}) *IRepository_Add_Call {
	return &IRepository_Add_Call{Call: _e.mock.On("Add", fields, values)}
}

func (_c *IRepository_Add_Call) Run(run func(fields []string, values []interface{})) *IRepository_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string), args[1].([]interface{}))
	})
	return _c
}

func (_c *IRepository_Add_Call) Return(_a0 int, _a1 error) *IRepository_Add_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IRepository_Add_Call) RunAndReturn(run func([]string, []interface{}) (int, error)) *IRepository_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *IRepository) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type IRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id int
func (_e *IRepository_Expecter) Delete(id interface{}) *IRepository_Delete_Call {
	return &IRepository_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *IRepository_Delete_Call) Run(run func(id int)) *IRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *IRepository_Delete_Call) Return(_a0 error) *IRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IRepository_Delete_Call) RunAndReturn(run func(int) error) *IRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: req
func (_m *IRepository) Find(req model.GetRequest) ([]model.Beer, error) {
	ret := _m.Called(req)

	var r0 []model.Beer
	var r1 error
	if rf, ok := ret.Get(0).(func(model.GetRequest) ([]model.Beer, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(model.GetRequest) []model.Beer); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Beer)
		}
	}

	if rf, ok := ret.Get(1).(func(model.GetRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IRepository_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type IRepository_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - req model.GetRequest
func (_e *IRepository_Expecter) Find(req interface{}) *IRepository_Find_Call {
	return &IRepository_Find_Call{Call: _e.mock.On("Find", req)}
}

func (_c *IRepository_Find_Call) Run(run func(req model.GetRequest)) *IRepository_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.GetRequest))
	})
	return _c
}

func (_c *IRepository_Find_Call) Return(_a0 []model.Beer, _a1 error) *IRepository_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IRepository_Find_Call) RunAndReturn(run func(model.GetRequest) ([]model.Beer, error)) *IRepository_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: id, fields
func (_m *IRepository) Update(id int, fields []string) error {
	ret := _m.Called(id, fields)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, []string) error); ok {
		r0 = rf(id, fields)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type IRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - id int
//   - fields []string
func (_e *IRepository_Expecter) Update(id interface{}, fields interface{}) *IRepository_Update_Call {
	return &IRepository_Update_Call{Call: _e.mock.On("Update", id, fields)}
}

func (_c *IRepository_Update_Call) Run(run func(id int, fields []string)) *IRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].([]string))
	})
	return _c
}

func (_c *IRepository_Update_Call) Return(_a0 error) *IRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IRepository_Update_Call) RunAndReturn(run func(int, []string) error) *IRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewIRepository creates a new instance of IRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRepository {
	mock := &IRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
