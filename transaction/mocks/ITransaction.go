// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ITransaction is an autogenerated mock type for the ITransaction type
type ITransaction struct {
	mock.Mock
}

type ITransaction_Expecter struct {
	mock *mock.Mock
}

func (_m *ITransaction) EXPECT() *ITransaction_Expecter {
	return &ITransaction_Expecter{mock: &_m.Mock}
}

// Log provides a mock function with given fields: fields, values, user, id, action
func (_m *ITransaction) Log(fields []string, values []interface{}, user string, id int, action string) error {
	ret := _m.Called(fields, values, user, id, action)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, []interface{}, string, int, string) error); ok {
		r0 = rf(fields, values, user, id, action)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ITransaction_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type ITransaction_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
//   - fields []string
//   - values []interface{}
//   - user string
//   - id int
//   - action string
func (_e *ITransaction_Expecter) Log(fields interface{}, values interface{}, user interface{}, id interface{}, action interface{}) *ITransaction_Log_Call {
	return &ITransaction_Log_Call{Call: _e.mock.On("Log", fields, values, user, id, action)}
}

func (_c *ITransaction_Log_Call) Run(run func(fields []string, values []interface{}, user string, id int, action string)) *ITransaction_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string), args[1].([]interface{}), args[2].(string), args[3].(int), args[4].(string))
	})
	return _c
}

func (_c *ITransaction_Log_Call) Return(_a0 error) *ITransaction_Log_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ITransaction_Log_Call) RunAndReturn(run func([]string, []interface{}, string, int, string) error) *ITransaction_Log_Call {
	_c.Call.Return(run)
	return _c
}

// NewITransaction creates a new instance of ITransaction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewITransaction(t interface {
	mock.TestingT
	Cleanup(func())
}) *ITransaction {
	mock := &ITransaction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
